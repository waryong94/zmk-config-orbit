#include <dt-bindings/zmk/input_transform.h>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define SCROLL_MOD mo 5

/ {
    zip_temp_layer: zip_temp_layer {
        compatible = "zmk,input-processor-temp-layer";
        #input-processor-cells = <2>;
        require-prior-idle-ms = <500>;
        excluded-positions = <26 27 28 29>;
    };

    trackball_listener {
        input-processors = <&zip_temp_layer 1 3000>;

        scroller {
            layers = <5>;
            input-processors = <
                   &zip_xy_to_scroll_mapper
                   &zip_scroll_transform INPUT_TRANSFORM_Y_INVERT
                   &zip_scroll_scaler 1 12
            >;

            process-next;
        };

        gaming {
            layers = <2>;
            input-processors = <&zip_xy_scaler 2 1>;
            process-next;
        };
    };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <100>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        ht: positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <100>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };
};

/ {
    macros {
        dongle_bootload_macro: bootload_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bootloader>;
            label = "BOOTLOAD_MACRO";
        };
        par: par {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap_time 10>,
                <&macro_tap>,
                <&kp RPAR &kp LEFT &kp LPAR>;
        };

        bkt: bkt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap_time 10>,
                <&macro_tap>,
                <&kp RBKT &kp LEFT &kp LBKT>;
        };
    };
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            bindings = <&kp ESC>;
            key-positions = <0 1>;
        };

        combo_grave {
            timeout-ms = <50>;
            bindings = <&kp GRAVE>;
            key-positions = <1 2>;
        };

        combo_enter {
            timeout-ms = <50>;
            bindings = <&kp ENTER>;
            key-positions = <17 18>;
        };

        combo_cut {
            timeout-ms = <50>;
            bindings = <&kp LC(X)>;
            key-positions = <20 21>;
        };

        combo_copy {
            timeout-ms = <50>;
            bindings = <&kp LC(C)>;
            key-positions = <21 22>;
        };

        combo_paste {
            timeout-ms = <50>;
            bindings = <&kp LC(V)>;
            key-positions = <22 23>;
        };

        combo_lang {
            timeout-ms = <50>;
            bindings = <&kp RALT>;
            key-positions = <27 28>;
        };

        combo_capslock {
            timeout-ms = <50>;
            bindings = <&kp CAPS>;
            key-positions = <28 29>;
        };

        combo_sqt {
            timeout-ms = <50>;
            bindings = <&kp SQT>;
            key-positions = <18 19>;
        };

        left_bkt {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <2 3>;
            timeout-ms = <50>;
        };

        right_bkt {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <6 7>;
            timeout-ms = <50>;
        };

        bac {
            bindings = <&kp BACKSLASH>;
            key-positions = <4 5>;
            timeout-ms = <50>;
        };

        combo_b {
            timeout-ms = <50>;
            bindings = <&kp B>;
            key-positions = <25 26>;
        };

        combo_m {
            timeout-ms = <50>;
            bindings = <&kp M>;
            key-positions = <26 27>;
        };

        combo_mouse4 {
            timeout-ms = <50>;
            bindings = <&mkp MB4>;
            key-positions = <26 17>;
        };

        combo_mouse5 {
            timeout-ms = <50>;
            bindings = <&mkp MB5>;
            key-positions = <28 17>;
        };

        combo_q {
            bindings = <&kp LS(Q)>;
            key-positions = <0 31>;
        };

        combo_w {
            bindings = <&kp LS(W)>;
            key-positions = <1 31>;
        };

        combo_e {
            bindings = <&kp LS(E)>;
            key-positions = <2 31>;
        };

        combo_r {
            bindings = <&kp LS(R)>;
            key-positions = <3 31>;
        };

        combo_t {
            bindings = <&kp LS(T)>;
            key-positions = <4 31>;
        };

        combo_o {
            bindings = <&kp LS(O)>;
            key-positions = <7 8>;
        };

        combo_p {
            bindings = <&kp LS(P)>;
            key-positions = <8 9>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
            &ht F1 Q    &ht F2 W    &ht F3 E     &ht F4 R     &ht F5 T             &ht F6 Y     &ht F7 U     &ht F8 I     &ht F9 O    &ht F10 P
            &hm LGUI A  &hm LALT S  &hm LCTRL D  &hm LSHFT F  &ht F11 G            &ht F12 H    &hm LSHFT J  &hm LCTRL K  &hm LALT L  &hm LGUI SEMI
            &kp Z       &kp X       &kp C        &kp V        &kp B                &kp N        &kp M        &kp COMMA    &kp DOT     &kp FSLH
                                                  &lt 3 SPACE          &lt 4 SPACE
            >;
        };

        MOUSE {
            bindings = <
            &trans  &trans  &trans  &trans  &trans          &trans  &trans     &trans            &trans     &trans
            &trans  &trans  &trans  &trans  &trans          &trans  &trans     &trans            &trans     &trans
            &trans  &trans  &trans  &trans  &trans          &trans  &mkp LCLK  &mkp MCLK         &SCROLL_MOD    &mkp RCLK
                                &trans          &trans
            >;
        };

        GAME {
            bindings = <
            &kp Q         &kp W         &kp E         &kp R         &kp T                 &kp Y       &kp U       &kp I       &kp O        &kp P
           &hm LGUI A  &hm LALT S  &hm LCTRL D  &hm LSHFT F        &kp G                 &kp H       &kp J       &kp K       &kp L        &kp SEMI
           &kp Z       &kp X       &kp C        &kp V        &kp B              &kp N       &mkp LCLK   &mkp RCLK   &SCROLL_MOD        &trans
                                                            &lt 3 SPACE           &lt 4 SPACE
            >;
        };

        NUMBER { 
            bindings = <
            &kp HOME  &kp END        &kp UP          &kp BSPC         &kp DEL            &kp EQUAL   &kp N7  &kp N8  &kp N9  &kp N0
            &kp TAB   &hm LALT LEFT  &hm LCTRL DOWN  &hm LSHFT RIGHT  &kp PG_UP           &kp PLUS   &kp N4  &kp N5  &kp N6  &kp FSLH
            &trans    &trans         &trans          &trans          &kp PG_DN         &kp MINUS  &kp N1  &kp N2  &kp N3  &kp DOT
                                                             &trans             &kp N0
            >;
        };

        FUNCTION {
            bindings = <
            &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4          &bt BT_CLR  &bt BT_CLR_ALL  &trans            &bootloader     &sys_reset
              &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC      &trans    &bootloader        &trans                &trans      &trans          &trans            &trans     &trans
            &trans        &trans        &trans        &trans        &trans               &trans    &kp C_PLAY          &kp C_VOLUME_DOWN    &kp C_VOLUME_UP      &trans
                                     &trans          &trans
            >;
        };

        SCROLL {
            bindings = <
            &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
                                  &trans          &trans
            >;
        };
    };
};
